npx cypress run --record --key e5ddfb10-374c-4b83-8529-7cfeb213e47c


---------------------------------------------------------------------
CUSTOM COMMANDS
commands.js

Cypress.Commands.add("plantillaCypress", (descripcion, url, titulo, tiempo) => {
    describe(descripcion, () => {
      it("test", () => {
        cy.visit(url);
        cy.title().should('eq', titulo);
        cy.wait(tiempo);
      });
    });
  });
  
  Cypress.Commands.add("elementoVisible", (selector, t) => {
    let tiempo=t
    cy.get(selector).should('be.visible');
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("elementoVisibleXpath", (xpath, t) => {
    let tiempo=t
    cy.xpath(xpath).should('be.visible');
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("typeCustom", (selector, texto, t) => {
    let tiempo=t
    cy.get(selector).should('be.visible').type(texto);
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("typeXpath", (xpath, texto, t) => {
    let tiempo=t
    cy.xpath(xpath).should('be.visible').type(texto);
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("clickForce", (selector, t) => {
    let tiempo=t
    cy.get(selector).should('be.visible').click({force: true});
    cy.wait(tiempo);
  });

  Cypress.Commands.overwrite("click", (selector, t) => {
    let tiempo=t
    cy.get(selector).should('be.visible').click();
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("clickForceXpath", (xpath, t) => {
    let tiempo=t
    cy.xpath(xpath).should('be.visible').click({force: true});
    cy.wait(tiempo);
  });

  Cypress.Commands.add("clickXpath", (xpath, t) => {
    let tiempo=t
    cy.xpath(xpath).should('be.visible').click();
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("waitCustom", (t) => {
    let tiempo=t
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("comboSelect", (selector, opcion, t) => {
    let tiempo=t
    cy.get(selector).select(opcion, {force: true});
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("comboSelectXpath", (xpath, opcion, t) => {
    let tiempo=t
    cy.xpath(xpath).select(opcion, {force: true});
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("checkCustom", (selector, t) => {
    let tiempo=t
    cy.get(selector).check().should('be.checked');
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("uncheckCustom", (selector, t) => {
    let tiempo=t
    cy.get(selector).uncheck().should('not.be.checked');
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("checkXpath", (xpath, t) => {
    let tiempo=t
    cy.xpath(xpath).check().should('be.checked');
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("uncheckXpath", (xpath, t) => {
    let tiempo=t
    cy.xpath(xpath).uncheck().should('not.be.checked');
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("verificarTextoContiene", (selector, texto, t) => {
    let tiempo=t
    cy.get(selector).should('be.visible').contains(texto);
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("verificarTextoContieneXpath", (xpath, texto, t) => {
    let tiempo=t
    cy.xpath(xpath).should('be.visible').contains(texto);
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("checkDosOpciones", (selector, opcion1, opcion2, t) => {
    let tiempo=t
    cy.get(selector).check(opcion1, opcion2);
    cy.wait(tiempo);
  });

  Cypress.Commands.add("checkDosOpcionesXpath", (selector, opcion1, opcion2, t) => {
    let tiempo=t
    cy.xpath(selector).check(opcion1, opcion2);
    cy.wait(tiempo);
  });
  
  Cypress.Commands.add("plantillaCypressBefore", (descripcion, url, titulo, nombreUsuario, contrase침a, btnLogin, selector, t) => {
    describe(descripcion, () => {
        let tiempo=t
      before(() => {
        cy.visit(url);
        cy.title().should('eq', titulo);
        cy.wait(tiempo);
        cy.get(nombreUsuario).should('be.visible').clear().type('NombreUsuario');
        cy.get(contrase침a).should('be.visible').clear().type('Contrase침a');
        cy.wait(tiempo);
        cy.get(btnLogin).should('be.visible').click();
      });
  
      after(() => {
        cy.log('##############ULTIMO CICLO FINAL DE TODO###############');
        cy.wait(tiempo);
        cy.get(selector).should('be.visible').click({force: true});
      });
  
      it("test1", () => {
        cy.log('hola');
        cy.wait(tiempo);
      });
  
      it("test2", () => {
        cy.log('hola');
        cy.wait(tiempo);
      });
  
      it("test3", () => {
        cy.log('hola');
        cy.wait(tiempo);
      });
    });
  });
  
  Cypress.Commands.add("goBack", () => {
    cy.go('back');
  });
  
  Cypress.Commands.add("goForward", () => {
    cy.go('forward');
  });
  
  Cypress.Commands.add("reloadCustom", () => {
    cy.reload();
  });
  
  Cypress.Commands.add("itCustom", (test) => {
    it(test, () => {});
  });
  
  Cypress.Commands.add("plantillaHooks", () => {
    before(() => {
      cy.log('Esto inicia antes que todo, solo una vez');
    });
  
    beforeEach(() => {
      cy.log('Esto se repite en cada uno de los test, muy importante');
    });
  
    afterEach(() => {
      cy.log('Esto se hace al final de todos los test');
    });
  
    after(() => {
      cy.log('##############ULTIMO CICLO FINAL DE TODO###############');
    });
  });

  Cypress.Commands.add('Validar_Campo', (selector,men,nombre_campo,t) => {
    cy.xpath(selector).should('be.visible').should("contain", men).then((val)=>{
            cy.log("*************************")
            cy.log("El/La o Los/Las " + nombre_campo + " son Incorrectos")
            cy.log("*************************")       
    });
  
})

  ------------------------------------------------------------------------------
  SNIPPETS
  javascript.json

  {

    "Plantilla_cypress": {
        "prefix": "c_plantilla_cypress",
        "body": [
            "/// <reference types='cypress' />",
            "require('cypress-xpath')",
            "",
            "describe('${1:descripci칩n}', () => {",
            "\tit('${2:test}', () => {",
            "\t\tlet tiempo = 1000;",
            "",
            "\t\tcy.visit('${3:url}');",
            "\t\tcy.title().should('eq', '${4:titulo}');",
            "\t\tcy.wait(tiempo);",

            "\t\t});",
            "});"
        ],
        "description": "Plantilla Cypress"
    },


    "Elemento_Visible": {
        "prefix": "c_elemento_visible",
        "body": [
            "cy.get('$1').should('be.visible');",
			"cy.wait(tiempo)"
                    ],
        "description": "Elemento Visible"
    },

	"Elemento_Visible_Xpath": {
        "prefix": "c_elemento_visible_xpath",
        "body": [
            "cy.xpath('$1').should('be.visible');",
			"cy.wait(tiempo)"
                    ],
        "description": "Elemento Visible"
    },
	
    "Type": {
        "prefix": "c_type",
        "body": [
            "cy.get('$1').should('be.visible').type('$2')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Type"
    },

	"Type_xpath": {
        "prefix": "c_type_xpath",
        "body": [
            "cy.xpath('$1').should('be.visible').type('$2')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Type"
    },


	"Click_force": {
        "prefix": "c_click_force",
        "body": [
            "cy.get('$1').should('be.visible').click({force: true})",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Click"
    },

	"Click_force_xpath": {
        "prefix": "c_click_force",
        "body": [
            "cy.xpath('$1').should('be.visible').click({force: true})",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Click xpath"
    },
	
	"Tiempo": {
        "prefix": "c_tiempo",
        "body": [
			"cy.wait(tiempo)"
                    ],
        "description": "Poner Tiempo"
    },

	
	"Combo_select": {
        "prefix": "c_combo_select",
        "body": [
            "cy.get('$1').select('$2', { force: true})",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Combo Select"
    },


	"Combo_select_xpath": {
        "prefix": "c_combo_select_xpath",
        "body": [
            "cy.xpath('$1').select('$2', { force: true})",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Combo Select"
    },

	"Check": {
        "prefix": "c_check",
        "body": [
            "cy.get('$1').check().should('be.checked')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Check"
    },


	"unCheck": {
        "prefix": "c_uncheck",
        "body": [
            "cy.get('$1').uncheck().should('not.be.checked')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress c_uncheck"
    },


    "Check-xpath": {
        "prefix": "c_check_xpath",
        "body": [
            "cy.xpath('$1').check().should('be.checked')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Check"
    },


	"unCheck-xpath": {
        "prefix": "c_uncheck_xpath",
        "body": [
            "cy.xpath('$1').uncheck().should('not.be.checked')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress c_uncheck"
    },



	"Verificar_Texto_contains": {
        "prefix": "c_verificar_texto_contains",
        "body": [
            "cy.get('$1').should('be.visible').contains('$2')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Verificar texto contiene"
    },

    "Verificar_Texto_contains_xpath": {
        "prefix": "c_verificar_texto_contains_xpath",
        "body": [
            "cy.xpath('$1').should('be.visible').contains('$2')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress Verificar texto contiene"
    },


	"Check_2opciones": {
        "prefix": "c_check_2opciones",
        "body": [
            "cy.get('$1').check('$2','$3')",
			"cy.wait(tiempo)"
                    ],
        "description": "Cypress checkbox seleccionado dos valores"
    },

    "Plantilla_cypress_Before": {
        "prefix": "c_plantilla_cypress_before",
        "body": [
            "/// <reference types='cypress' />",
            "require('cypress-xpath')",
            "",
            "",
            "describe('${1:descripci칩n}', () => {",            
            "\tlet tiempo = 3000;",
            "\tbefore(() => {",
            "\t\tcy.visit('${2:url}');",
            "\t\tcy.title().should('eq', '${3:titulo}');",
            "\t\tcy.wait(tiempo);",
            "\t\tcy.get('${4:UserName}').should('be.visible').clear().type('${5:NombreUsuario}')",
            "\t\tcy.get('${6:Password}').should('be.visible').clear().type('${7:Contrase침a}')",
            "\t\tcy.wait(tiempo);",
            "\t\tcy.get('${8:btnLogin}').should('be.visible').click();",
            "});",


            "after(() => {",
                "cy.log('##############ULTIMO CICLO FINAL DE TODO###############')",
                "\t\tcy.wait(tiempo);",
                "\t\tcy.get('$12').should('be.visible').click({force: true})",
               " })", 


            "\tit('${9:test1}', () => {",         
            "\t\tcy.log('hola')  ",
            "\t\tcy.wait(tiempo);",
            "});",


            "\tit('${10:test2}', () => {",         
            "\t\tcy.log('hola')  ",
            "\t\tcy.wait(tiempo);",
            "});",


            "\tit('${11:test3}', () => {",         
            "\t\tcy.log('hola')  ",
            "\t\tcy.wait(tiempo);",
            "});",


            "});"
        ],
        "description": "Plantilla Cypress Before"
    },

   
    "GO_Back_REGRESA A A  P츼GINA ANTERIOR": {
        "prefix": "c_go_back",
        "body": [
            "cy.go('back')"
                    ],
        "description": "Cypress go back, para volver a lo anterior"
    },

    "GO_Forward": {
        "prefix": "c_go_forward",
        "body": [
            "cy.go('forward')"
                    ],
        "description": "Cypress go forward, para ir a la siguiente"
    },

    "Reload_borra_todos_los_campos": {
        "prefix": "c_reload",
        "body": [
            "cy.reload()"
                    ],
        "description": "Cypress reload, borra todos los campos"
    },


    "it": {
        "prefix": "c_it",
        "body": [
            "it('${1:test}'), () =>{",
            "})"
        ],
        "description": "it"
    },

    "Hooks":{

        "prefix":"c_Plantilla_Hooks",
        "body":[

           " before(() => {",
                "cy.log('Esto inicia antes que todo, solo una vez')",
              "})",

            "beforeEach(() => {",
                "cy.log('Esto se repite en cada uno de los test, muy importante')",
              "})",

           "afterEach(() => {",
                "cy.log('Esto se hace al final de todos los test')",
              "})",

            
            "after(() => {",
                "cy.log('##############ULTIMO CICLO FINAL DE TODO###############')",
               " })" 


        ]
    }

}
